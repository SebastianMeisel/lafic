#!/usr/bin/perl
# dtf2html - convert dtf to html
# Copyright (C) 2019  Sebastian Meisel

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth
# Floor, Boston, MA  02110-1301, USA.  

use strict;
use warnings;

use warnings::register;

use File::Basename;
use Cwd;
use Cwd 'abs_path';
use FindBin qw($RealBin);

use Data::Dumper;
use HTML::Entities;
 

#######
# License statment
#########

print "    –––––––––––––––––––––––––––
    lafic2html [version 0.1] Copyright (C) 2019 by Sebastian Meisel
    This program comes with ABSOLUTELY NO WARRANTY; 
    This is free software, and you are welcome to redistribute it
    under certain conditions; read LICENCE for details.
    –––––––––––––––––––––––––––––––\n\n";

#######
# lafic directory
#########
my $lafic_dir = $RealBin;
use lib "$RealBin/modules";
no lib ".";


######
# read lafic.config.pl
#####
my %config = do "$lafic_dir/lafic.config.pl"; 

# if lang definde and module exist load lang module
 
 SELECT:{
     if ($config{"lang"} =~ /^de_DE$/){
	 my $module = "$lafic_dir/modules/laficHtml/de_DE.pm"; 
	 if (-e $module) {
	     print "use $module\n";
	     use lafic::de_DE;
	     }
	 last SELECT}
}

######
# variables and hashes
######



# hash for known line macros
my %macros = (
    # headings
    "h1" => "H1",
    "heading1" => "H1",
    "title" => "H1",
    "h2" => "H2",
    "heading2" => "H2",
    "part" => "H2",
    "chapter" => "H2",
    "h3" => "H3",
    "heading3" => "H3",
    "section" => "H3",
    "h4" => "H4",
    "heading4" => "H4",
    "subsection" => "H4",
    "h5" => "H5",
    "heading5" => "H5",
    "subsubsection" => "H5",
    "h6" => "H6",
    "heading6" => "H6",
    "" => "H6",
    "h" => "H3",
    "heading" => "H3",
    "marginpar" => ".annote",
    "annote" => ".annote",
    );


# hash for known environments
my %environments = (
    # quotations
    "quote" => "blockquote",
    "quotation" => "blockquote",
    # center
    "center" => ".center",
    "c" => ".center",
    # lists
    "enumerate" => "ol",
    "ol" => "ol",
    "itemize" => "ul",
    "list" => "ul",
    "ul" => "ul",
    ######
    # figures 
    "image" => "figure",
    "img" => "figure",
    "figure" => "figure",
    ######
    "verbatim" => "pre",
    "verb" => "pre",    
);


# hash for known inline macros
my %il_macros = (
    # shape
    "bold" => "b",
    "emphasize" => "em",
    "italic" => "i",
    # variant
    "mono" => ".tt",
    "typewriter" => ".tt",
    "smallcaps" => ".sc",
    # position
    "superscript" => "sup",
    "subscript" => "sub",
    # links
    "url" => "a",
    "link" => "a",
    "see" => "a",
    # footnotes
    "footnote" => ".fn",
    "color" => ".color",
    );

# hash for know parameters
my %parameters = (
    # labels
    "name" => "id",
    "label" => "id",
    # figures
    "width" => "width",
    "length" => "width",
    "height" => "height",
    "caption"=> "caption",
    # paragraph
    "background" => "background-color",
    "color" => "color",
    "align" => "text-align",
    );

# hash for keywords like "break lines"
my %keywords = (
    "break lines" => "br",
    "br" => "br",
    "level+" => "+",
    "+" => "+",
    "level-" => "-",
    "-" => "-",
    );

#  Color names
my %colors = (
    "gray" => "lightgray",
    "green" => "lawngreen",
    "yellow" => "#FFF8C6",
    "blue" => "#00FFFF",
    "red" => "red",
    "white" => "white",
    );

######
# Language specific
########
 SELECT: {
     # german
     if ($config{"lang"} =~ /^de_DE$/) {
	 # macros
	 my $lang_macro_file = "$lafic_dir/de_DE/Html.macros.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %macros = (%macros, do $lang_macro_file);
	 }
	 # inline macros
	 $lang_macro_file = "$lafic_dir/de_DE/Html.il_macros.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %il_macros = (%il_macros, do $lang_macro_file);
	 }
	 # environments
	 $lang_macro_file = "$lafic_dir/de_DE/Html.environments.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %environments = (%environments, do $lang_macro_file);
	 }
	 # parameters
	 $lang_macro_file = "$lafic_dir/de_DE/Html.parameters.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %parameters = (%parameters, do $lang_macro_file);
	 }
	 # keywords
	 $lang_macro_file = "$lafic_dir/de_DE/Html.keywords.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %keywords = (%keywords, do $lang_macro_file);
	 }
	 # colors
	 $lang_macro_file = "$lafic_dir/de_DE/Html.colors.pl";
	 if (-e $lang_macro_file) {
	     print "load $lang_macro_file.\n";
	     %colors = (%colors, do $lang_macro_file);
	 }
	 last SELECT}
}
    

# declare $template variable for template filehandler
my $template;


###############################
my ($basename,$path,$ext) = fileparse(abs_path($ARGV[0]), qr/\.[^.]*/); 
my $lafic_file = "$path$basename$ext";
#my $path = dirname(abs_path($ARGV[0])); 
my $html_file = "$path$basename.html";
###############################

# open output file

open(OUTPUT, ">$html_file") or
    (print  "Could not open $path$html_file");


open(INPUT, "<$lafic_file") or
    (print   "Could not open $lafic_file");


local $/;
my $data = <INPUT>;
# and parse it
parseFile($data);

###########################################
## SUBS
################

### Print template preamble to marker for input
sub startTemplate {
    # If template isn't allready open for input
    # open Standard template.
    #####
    # TODO add path
    #####

    my $marker = shift;

    
    unless (defined $template) {
	my $temp_file;
	# project template
	if (-e "$path$basename.tmp.html"){
	    $temp_file = "$path$basename.tmp.html";
	}
	# german standard template 
	elsif ($config{"lang"} =~ /^de_DE$/ ) {
	    $temp_file = "$lafic_dir/templates/Standard_de_DE.tmp.html";
	}
	#english standard template
	else {
	    $temp_file = "$lafic_dir/templates/Standard.tmp.html";
	}
	open(TEMPLATE, "<$temp_file") or
	    die "Could not open $temp_file";
	print "use $temp_file\n";
	local $/;
	$template = <TEMPLATE>;
    }

    
    # Print template to %$marker% line
    while ($template =~ /^(.*?)$/mg) {
	my $line = $1;

	# stop at marker
	if ($line =~ /\<!-- $marker --\>/){last}

	print OUTPUT "$line\n";
    }
}

# make proper Html code
sub Html {
    my $par = shift;

    # english quotation marks
    my $oqm =  "“";
    my $cqm =  "”";
    my $osqm = "‘ ";
    my $csqm = "’";
    # german quotation marks
    if ($config{"lang"} =~ /de_DE/) {
	$oqm =  "„";
	$cqm =  "“";
	$osqm = "‚";
	$csqm = "‘";
    }



    # special chars
    $par = encode_entities($par, "&<>");

    # No space at end of par
    $par =~ s/\s*?$//;
    # Non breaking space befor – and … 
    $par =~ s/\s(–|…)/&nbsp;$1/g;

    # Apostroph
    $par =~ s/(\w)(’|´)(\w)/$1’$3/mg;
    
    # quotation marks
    $par =~ s/(\W|^)('|‘|’|‚)(\w|[{ÄÖÜäöü\.\?\!:,;…])/$1$osqm$3/mg ;
    $par =~ s/(\w|[}ÄÖÜäöü\.\?\!:,;…])(‘|’|')(\W|$)/$1$csqm$3/mg;
    $par =~ s/(\W|^)("|„|``)(\w|[{ÄÖÜäöü\.\?\!:,;…])/$1$oqm$3/mg ;
    $par =~ s/(\w|[}ÄÖÜäöü\.\?\!:,;…])(''|"|„|“|``)(?!'|`)(\W|$)/$1$cqm$3/mg;

    return $par;
}

#################
# Handle parameters of inline macros
#################
sub handle_il_argument {
    my ($macro, @argument) = @_;
    
    my $return;
    my $text =  Html(join(":", @argument));

    SELECT: { # first check, which macro to handle
    	if ($macro =~ /^a$/) {
	    # check if hyperlink
	    if ($argument[0] =~ /^http|mailto|file/){
		$return = " href=\"".$text."\"";
	    }
	    # internal reference
	    else {
		$return = " href=\"#".$text."\"";
	    }
		
	    last SELECT}
	else {$return = $text;}
    }


    return $return;
}




#################
# Handle parameters of macros or environments
#################
sub handleParameter {
    my ($env_mac, %parameter) = @_;

    my @return;

    my $key;
    
    # get standard keywords for parameter   
    foreach $key (keys %parameter) {
	if ($parameters{$key}){
	    $parameter{$parameters{$key}} = delete($parameter{$key});
	}
    }

    
    if (keys %parameter) {
	# figure / includegraphics
	if ($env_mac =~ /^(figure|img)$/) {
	    my $optional ="style=\"";
	    if ($parameter{"width"}){
		$optional = "$optional width: $parameter{'width'};";
	    }
	    if ($parameter{"height"}){
		$optional = "$optional height: $parameter{'height'};";
	    }

	    # delete leading spaces
	    $optional =~ s/"\s*/"/;
	    # delete trailing spaces and comma
	    $optional =~ s/,\s*$//;
	    #add final "
	    $optional = $optional."\"";

	    @return = (@return, $optional);


	}
	# caption in figure
	if ($env_mac =~ /^figure$/) {
	    if (! $parameter{"caption"} =~ /^$/) {
		@return = (@return, $parameter{"caption"});
	    }  
	    if (! $parameter{"id"} =~ /^$/) {
		my $id = " id=\"".$parameter{"id"}."\"";
		@return = (@return, $id);
	    }
	}
	# name in headings
	if ($env_mac =~ /^H[2-4]$/) {
	    if (! $parameter{"id"} =~ /^$/) {
		my $id = " id=\"".$parameter{"id"}."\"";
		@return = (@return, $id);
	    }
	}
    }
    
    return @return;
}


####################
# Output of lines / paragraphs
########################
sub outputLines {
    # get parameters
    my ($par, $parstyle, $macro, $title, $environment, $prev_env, $list_level, $div_level, $newfile, $newpar, %parameter) = @_;
    
    
    # check if continious environment needs to be closed
    unless ($environment =~ /^$prev_env$/ or $prev_env eq "") {
	# check if div
	if ($prev_env =~ /^\./) {
	    print OUTPUT "</div>\n\n";
	    # close open nested divs
	    for (my $i=1; $i <= $div_level; $i++){
		print OUTPUT "</div>\n";
	    }
	    # reset div level counter
	    $div_level=0;
	}
	else {
	    # close <li>
	    if ($prev_env =~ /^[ou]l$/){
		print OUTPUT "</li>\n";}
	    print OUTPUT "</$prev_env>\n\n";
 	    # close open nested lists
	    for (my $i=1; $i <= $list_level; $i++){
		print OUTPUT "</$prev_env>\n";
	    }
	    # reset list level counter
	    $list_level=0;
	    # close open nested divs
	    for (my $i=1; $i <= $div_level; $i++){
		print OUTPUT "</div>\n";
	    }
	    # reset div level counter
	    $div_level=0;
	}
    }
    elsif ($prev_env eq "") { 
	# need to close nested divs also for simple paragraphs or lines
	for (my $i=1; $i <= $div_level; $i++){
	    print OUTPUT "</div>\n";
	}
	# reset div level counter
	$div_level=0;
    }

    # print newline
    print OUTPUT "\n";


    unless ($environment =~ /^pre$/){
	# list level+
	$par =~ s/^[[:blank:]]*(&gt;|>)\n+/<\/li>\n<$environment>\n/mg;
	$par =~ s/^[[:blank:]]*(&lt;|<)\n+/<\/li>\n<\/$environment>\n/mg;
    }

    # Paragraph parameters
    # background- and text color / align
    my $key;
    my %value;
    foreach  $key (keys %parameter) {
    	if ($parameters{lc($key)}){
    	    if($parameters{lc($key)} =~ /^(background-color|color|text-align)$/){
    		$parameter{$1} = delete($parameter{$key});
    		if ($colors{$parameter{$1}}){
    		    $value{$1} = $colors{$parameter{$1}};
    		}
    		#elsif($align{$parameter{$1}}) … 
    		else {$value{$1} = $parameter{$1};}
    	    }
    	}}
    if(%value) {
    	print OUTPUT "<div style=\"padding: 1em";
    	foreach $key (keys %value){
    	    print OUTPUT "; ".$key.": ";
    	    print OUTPUT $value{$key};
    	}
    	print OUTPUT "\">\n";
	# increase div-level
	$div_level++;
    }
    
    # close macro or environment  
  SELECT: {
      # no content
      if ($par =~ /^(\s*)$/) {last SELECT}
      
      # line / macro
      if ($parstyle == 0 || $parstyle == 3) {
		  # check if it is first line / paragraph
	  if ($newfile == 1 and not $template =~ /^empty$/) {
		      startTemplate("TITLE");
		      $newfile = 0;
		  }

		  # check if span
		  if ($macro =~ /^\./) {
		      $macro =~ s/^\.//;
		      print OUTPUT "<span class=\"$macro\">$par</span>\n";
		  }
		  # save title and run startTemplate
	  elsif ($macro =~ /^(title|h1)$/i) {
	      # unless this is a snippet
	      unless ($template =~ /^empty$/) {
		  $title = $par;
		  print OUTPUT "<meta name=\"title\"";
		  print OUTPUT "content=\"";
		  print OUTPUT $title;
		  print OUTPUT "\">\n";
		  if ($config{"author"}){
		      print OUTPUT "<meta name=\"author\"";
		      print OUTPUT "content=\"";
		      print OUTPUT $config{"author"};
		      print OUTPUT "\">\n";
		  }
		  
		  startTemplate("TEXT");
	      }
	      $macro = "h1";
	      # print title as heading
	      print OUTPUT "<$macro>$par</$macro>\n";
	      # mark in stdout
	      print "\n$par\n";
	      
	      $newfile = 0;
	      # }		
	  }
		  # check if heading
		  elsif ($macro =~/^H[2-4]/i){
		      # optional parameters
		      my ($optional) = handleParameter($macro, %parameter);
		      if (! defined $optional) {
			  $optional =""}
		      
		      print OUTPUT "<$macro$optional>$par</$macro>\n";
		      # mark in stdout
		      print "\n$par\n";
		  }
		  else {
		      print OUTPUT "<$macro>$par</$macro>\n";
		      # mark in stdout
		      print "\n$par\n";
	          }
		  
		  last SELECT}
	      # paragraph
	      if ($parstyle == 1) {
		  # check if it is first line / paragraph
		  if ($newfile == 1 ) {
		      # unless this is a snippet
		      unless ($template =~ /^empty$/){
			  startTemplate("TITLE");
			  if ($title =~ /^\s*$/) {
			      $title = "Ein Text";
			      print OUTPUT "<meta name=\"title\"";
			      print OUTPUT "content=\"";
			      print OUTPUT $title;
			      print OUTPUT "\">\n";
			      if ($config{"author"}){
				  print OUTPUT "<meta name=\"author\"";
				  print OUTPUT "content=\"";
				  print OUTPUT $config{"author"};
				  print OUTPUT "\">\n";
			      }
			  
			      startTemplate("TEXT");
			  }
			  $macro = "H1";
			  
			  print OUTPUT "<$macro>$title</$macro>\n";

			  $newfile = 0;
		      };
		  };
		  # check if it's an image
		  if (lc($par) =~ /\.(png|jpg|jpeg|gif)$/){
		      # get optional parameters
		      $macro = "img";
		      my $optional = "";
		      ($optional) =  handleParameter($macro, %parameter);
		      
		      print OUTPUT "<$macro $optional src=\"./$par\">\n";
		  }
		  # normal paragraph
		  else {
		      print OUTPUT "<p>\n";
		      print OUTPUT "$par\n";
		      print OUTPUT "<\/p>\n";
		  }
		  last SELECT}
	      # comment
	      # if ($parstyle == 2) {
	      # 	  # for the moment we skip comments
	      # 	  print OUTPUT "$par\n";
	      # 	  last SELECT}
	      # formated paragraph
	      if ($parstyle == 4) {
		  # check if it is first line / paragraph
		  if ($newfile == 1) {
		      # unless this is a snippet
		      unless ($template =~ /^empty$/){
			  startTemplate("TITLE");
			  # check if title is defined
			  unless (defined $title) {
			      # run startTemplate
			      print OUTPUT "<title>Unbekannt</title>\n";
			  }
			  startTemplate("TEXT");
		      }
		      # print title as heading
		      $macro = "H1";
		      print OUTPUT "<$macro>$par</$macro>\n";
		      $newfile = 0;
		  }
		  # figures are special
		  if ($environment =~ /^figure$/) {
		      # optional parameters
		      my ($optional, $caption, $id) = handleParameter($environment, %parameter);
		      if (! defined $optional) {$optional =""}
		      if (! defined $caption) {$caption =""}
		      if (! defined $id) {$id =""}
		      
		      print OUTPUT "<figure $id role=\"group\">\n";
		      print OUTPUT "<img $optional src=\"./$par\">\n";
		      if (! $caption =~ /^$/ ) {
			  print OUTPUT "<figcaption>$caption</figcaption>\n";
		      }
		      print OUTPUT "</figure>\n";
		  }
		  # list environment
		  elsif ($environment =~ /^[ou]l$/) {
		      unless ($environment eq $prev_env) {
			  print OUTPUT "<$environment>\n";
		      }
		      # make * <li> … </li>
		      # first bullets
		      $par =~ s/^\s*[-*+–]/<li>/g;
		      # further bullets
		      $par =~ s/\n\s*[-*+–]/<\/li>\n<li>/mg;
		      # hack  -> better solution?
		      $par =~ s/<(\/?)ul><\/li>/<$1ul>/g;
		      # close <li>
#		      $par = $par."</li>";
		      # begin new environment only if not continuous  
		      print OUTPUT "$par\n";
		  }
		  # other environment
		  else {
		      # check if div and not continous
		      if ($environment =~ /^\./ and not $environment eq $prev_env){
			  $environment =~ s/^\.//;
			  print OUTPUT "<div class=\"$environment\">\n";
		      }
		      else {
			  unless ($environment eq $prev_env) {
			      print OUTPUT "<$environment>\n";}
		      }
		      print OUTPUT "<p>$par</p>\n";
		  }
		  last SELECT}
    }


    # # close colorbox
    # if ($parameter{"background-color"} or $parameter{"text-align"} or $parameter{"color"}) {
    # 	print OUTPUT "</div>\n";
    # }

    

    return ($newfile, $list_level, $div_level);
}

######################################
# Main Parser
#################################
    
sub parseFile {
    my $file = shift;

    # read input file
    print  "Parsing $lafic_file …\n";
    print  "output to $html_file …\n";

    my $par = ""; # paragraphs / lines
    
    # marker for beginning of file 
    my $newfile = 1;

    # marker for beginning of line / paragraph 
    my $newpar = 1;
    # line counter
    my $i = 0; 
    
    # parstyles:
    # 0 = single line
    # 1 = paragraph
    # 2 = comment
    # 3 = formated line
    # 4 = formated paragraph
    my $parstyle = 0;

    # Keyword for line / paragraph layout
    my $parkey = "";

    # macro / environment name
    my $macro = "";
    my $environment = "";
    # previous environment
    my $prev_env = "";
    # markers for continous environment
    my $list_level = 0;
    my $div_level = 0;
    # title
    my $title = "";

    # marker for format block
    my $formbl = 0;

    # parameter hash
    my %parameter;

    # footnotes
    my $fn_counter = 0;
    my @footnotes;
    
    while ($file =~ /^(.*?)$/mg) {
	print ".";
	# line to parse
	my $line = $1;
	$i++;

    	# First line of paragraph or line
    	if ($newpar == 1) {
    	    # then check for line / paragraph layout line
    	    if ($line =~ /^[%](.*?)$/) {
    		my $lc = $1; # content of line
    		# hardcoded comment?
		if ($lc =~ /^[%]/) {
		    $parstyle = 2;
		    $newpar=0;
		    $par = "";
		    next}
		elsif ($lc =~ /^\s*$/) {
		    # snippet?
		    if ($newfile == 1 and $i == 1){
			$template = "empty";
		    } 
		}
    		# layout line or comment?
    		elsif ($lc =~ /^(\s*)([0-9a-zA-Z_À-ÿ\.]+?)(\s*)([%].*)?$/) {
    		    # at least formated line
    		    # check later if it is formated par
    		    $parstyle = 3;
    		    # save keyword for line or paragraph layout
    		    $parkey = $2;

		    #  check, if it's begin of Document
		    if ($newfile == 1  and $i == 1){
			# parkey is template name?
			if (-e "$lafic_dir/templates/$parkey.tmp.html"){
			    # open template
			    #######
			    # TODO: add search path
			    ########
			    # set language based on template
			    if ($parkey =~ /de_DE$/) {
				# german
				$config{"lang"} = "de_DE";
			    }
			    else {
				# english
				$config{"lang"} = "en_EN";
			    }

			    open(TEMPLATE, "<$lafic_dir/templates/$parkey.tmp.html") or
				die "Could not open $lafic_dir/templates/$parkey.tmp.html";
			    print "use $lafic_dir/templates/$parkey.tmp.html\n";
			    local $/;
			    $template = <TEMPLATE>;
			    
			    # clear up
			    $parkey = "";
			    $parstyle = 0;
			    $par = "";
			}}
		    else{
			# make parkey lowercase for other options
			$parkey = lc($parkey);
		    }
    		    next}
    		else {
    		    # comment
    		    $parstyle = 2;
		    # 
		    $newpar = 0;
    		    next}
    	    }
	    # check for leading * : list
	    elsif ($line =~ /^(\s*)[*-+–•]/){
		# make sure, this is seen as formated paragraph
		$parstyle = 4;
		    
		# known environment
		if (exists $environments{$parkey}){
		    $environment = $environments{$parkey};
		}
		
		# make sure this is an list environment
		unless ($environment =~ /^[ou]l$/ or $environment =~ /^pre$/) {
		    $environment = "ul";
		}

		if ($newpar == 1) {
		    $par =  "\n" . $line;
		}
		$newpar = 0;
	    }
	    # if ".", "?", "!" then paragraph 
	    elsif ($line =~ /[.?!:]/g) {
		# increase parstyle by 1
		$parstyle++;

		# add line to par
		$par = $line;

		SELECT: {
		# normal paragraph    
		# if ($parstyle == 1) {
		#     last SELECT}
		# formated paragraph
		if ($parstyle == 4) {
		    # TOD0: other keywords
		  SELECT:{
		      # known environment
		      if (exists $environments{$parkey}){
			  $environment = $environments{$parkey};
			  last SELECT;}
		      # explicit line declaration?
		      elsif (exists $macros{$parkey}){
			  $macro = $macros{$parkey};
			  $parstyle = 3;
			  last SELECT;}
		      # unknown environment
		      else {
			  $environment = "\.$parkey";
			  last SELECT;}		   
		    }
		    last SELECT}
		}
		$newpar = 0;
#		$newfile = 0;
	    }
	    # else line
	    else {
		# skip repeated empty lines
		if ($line =~ /^(\s*)$/){next}
		
		# add line to par
		$par = $line;
		
		SELECT: {
		    # section heading    
		    if ($parstyle == 0) {
			if ($newfile == 1  and $i == 1) {
			    $macro = "title";
			}
			else{
			    $macro = "H3";
			}
			last SELECT}
		    # formated line
		    if ($parstyle == 3) {
			# known macros
			if (exists $macros{$parkey}){
			    $macro = $macros{$parkey};
			    last SELECT}
			# check if paragraphstyle is forced
			elsif (exists $environments{$parkey}){
			    $environment = $environments{$parkey};
			    $parstyle = 4;
			    last SELECT}
			# unknown keyword:
			else {$macro = "\.$parkey"}
			last SELECT}
		}
		$newpar = 0;
	    }
    	}
	# further content of paragraph / line
    	else {
	    # first check if its a comment
	    if ($parstyle == 2 ){
		# add line to paragraph/line content
		# $par = $par . " " . $line;
		#skip for now
		}
	    # than check for format line  
	    elsif($line =~ /^[%](\s*?)(\S.*)$/) {
		my $fline = $2;
		# remove trailing spaces
		$fline =~ s/\s*?$//;
		
		# check if formatblock begins
		########
		# TODO: use for warnings
		#######
		if ($formbl == 0) {
		    # first make proper Html  code
		    unless ($environment && 
			    $environment =~ /^pre$/){
			$par = Html ($par);
		    }
		    # mark as formatbl
		    $formbl = 1;
		}

		# format or parameter
		if ($fline =~ /:/) {
		    # split into searchstring an format key
		    my ($searchstring, $fkey, @argument) = split /:\s*/ , $fline;

		    # some Html  addoptions
		    unless ($environment && 
			    $environment =~ /^pre$/){
		    $searchstring = Html ("$searchstring");
		    }
		    $searchstring =~ s/(\.|\?)/\\$1/g;

		    
		    # make format key lowercase 
		    $fkey = lc($fkey);
		    #remove comments and trailing spaces
		    $fkey =~ s/\s*([%].*)?$//;
		    my $format = $fkey;
		    my $format_start = "";
		    
		    # check if know keyword
		    if (exists $il_macros{$fkey}) {
			$format = $il_macros{$fkey};
		    }
		    # else mark as span
		    else {$format = ".$format";}

		    # handle inline arguments
		    my $il_arg = "";
		    if (@argument) {
		        $il_arg = handle_il_argument($format, @argument);
		    }

		    # check if span
		    if ($format =~ /^\./){
			$format =~ s/^\.//;
			# check if footnote
			if ($format =~ /^fn$/){
			    $fn_counter++;
			    $format_start = "a class=\"fn\" href=\"#fn$fn_counter\" id=\"fna$fn_counter\"";
			    # put footnote text in array 
			    # for output at end.
			    push (@footnotes, $il_arg);
			    $il_arg="";
			    # format is actually <a>
			    $format = "a";
			}
			# text color
			elsif ($format =~ /^color$/){
			    $fn_counter++;
			    my $tcolor;
			    if($colors{$il_arg}){
				$tcolor = $colors{$il_arg};}
			    else {$tcolor = $il_arg;}
			    $format_start = "span style=\"color: $tcolor\"";
			    $il_arg = "";
			    $format = "span";
			}
			# else it's a span
			else {
			    $format_start = "span class=\"$format\"";
			    $format = "span";
			}
		    }
		    else {$format_start = $format;}

		    
	
		    # range or single word
		    if ($searchstring =~ /(\.{3,3}|…)/ ) {
			my @pattern = split /$1/ , $searchstring;
			
			# check for context
			my @context = ("" , "");
			my $i = 0;
			for (@pattern) {
			    if ($pattern[$i] =~ /[(](.*?)[)]/) {
				$context[$i] = $1;
				# handle special chars for search
				$context[$i] =~ s/([]().?!\$\-*])/\\$1/g;
				$pattern[$i] =~ s/([(].*?[)])//;
				# remove leading spaces from pattern
				$pattern[$i] =~ s/^\s*//;
				# remove trailing spaces from pattern
				$pattern[$i] =~ s/\s*$//;
				# handle special chars for searcg
				$pattern[$i] =~ s/([]().?!\$\-*])/\\$1/g;
			    }
			    else {
				# handle special chars for search
				$pattern[$i] =~ s/([]().?!\$\-*])/\\$1/g;}
				
			    $i ++;
			}
			
			$par =~ s/$context[0](\W*?)($pattern[0](.*?)$pattern[1])(\W*?)$context[1]/$context[0]$1<$format_start$il_arg>$2<\/$format>$4$context[1]/g;		
		    }
		    else {
			# check for context
			my @context = ("" , "");
			# Zeilenanfang
			if ($searchstring =~ /^[(](.*?)[)]/){
			    $context[0] = $1;
			    # handle special chars for search
			    $context[0] =~ s/([]().?!\$-])/\\$1/g;
			}
			# Zeilenende
			if ($searchstring =~ /[(](.*?)[)]$/){
			    $context[1] = $1;
			    # handle special chars for search
			    $context[1] =~ s/([]().?!\$-])/\\$1/g;
			}
			
			# context entfernen
			$searchstring =~ s/[(](.*?)[)]//mg;
			
			# remove leading spaces from searchstring
			$searchstring =~ s/^\s*//;
			# remove trailing spaces from searchstring
			$searchstring =~ s/\s*$//;
			# handle special chars for search
			$searchstring =~ s/([]().?!\$\-*])/\\$1/g;


			$par =~ s/$context[0](\W*?)($searchstring)(\W*?)$context[1]/$context[0]$1<$format_start$il_arg>$2<\/$format>$3$context[1]/g;
		    }
		}
		# Parameter
		elsif ($fline =~ /=/) {
		    # split into searchstring an format key
		    %parameter = (%parameter, split /\s*=\s*/ , $fline);
		}
		else {
		    # keywords like linebreaks, etc.
		    if ($keywords{"$fline"}){
			if ($keywords{"$fline"} =~ /^br$/){
			    $par =~ s/$/<br \/>/mg;
			}
			elsif ($keywords{"$fline"} =~ /^[+]$/){
			    $list_level++;
			    $par =~ s/^\n//mg;
			    $par = ">\n".$par;
			}
			elsif ($keywords{"$fline"} =~ /^[-]$/){
			    $list_level--;
			    $par = "<\n".$par;
			}
			else {
			    print STDERR "warning: keyword '$fline' is unknown.\n";
			}
		    }
		    else {
			print STDERR "warning: keyword '$fline' unknown.\n";
		    }
		}
	    }
	    # check for ".", "?", "!" : paragraph
	    elsif ($line =~ /[.?!:]/g) {
		# check if $parstyle is paragraphstyle 
		# or make it so:
		if ($parstyle == 0) {$parstyle = 1}
		elsif ($parstyle == 3) {
		    $parstyle = 4;
		    $environment = "\.$parkey";
		}
		# add line to paragraph/line content
		$par = $par . "\n" . $line;
	    }
	    # odinary content of line or paragraph
	    else {
		# add line to paragraph/line content
		$par = $par . "\n" . $line;
	    }
	    
    	}
	
    	#  empty line:
	if ($line =~ /^(\s*)$/) {
	    #clear spaces at lineend
	    $par =~ s/(\s*)$//;

	    # If not done jet
	    if ($formbl == 0){
		# make proper Html  code
		unless ($environment && 
			$environment =~ /^pre$/){
		$par = Html ($par);
		}
	    }


	    # output lines / paragraphs
	    ($newfile, $list_level, $div_level) = outputLines ($par , $parstyle, $macro, $title, $environment, $prev_env,  $list_level, $div_level, $newfile, $newpar, %parameter);
	    
	    # better clean up
	    $parkey = "";
	    $macro = "";
	    $prev_env = $environment;
	    $environment = "";
	    $par = "";
	    $parstyle = 0;
	    $formbl = 0;

	    undef %parameter;

	    
	    # set newpar to 1 (true)
	    $newpar = 1;
	    
	    next}

    }
    # One last look, if file closes without newline
    $par =~ s/(\s*)$//;

    # If not done jet
    if ($formbl == 0){
	# make proper Html  code
	unless ($environment && 
		$environment =~ /^pre$/){
	    $par = Html ($par);
	}
    }

    # output lines / paragraphs
    ($newfile, $list_level, $div_level) = outputLines ($par , $parstyle, $macro, $title, $environment, $prev_env,  $list_level, $div_level, $newfile, $newpar, %parameter);
    
    # better clean up
    $parkey = "";
    $macro = "";
    $prev_env = $environment;
    $environment = "";
    $par = "";
    $parstyle = 0;
    $formbl = 0;
    undef %parameter;
    
    # close open nested divs
    for (my $i=1; $i <= $div_level; $i++){
	print OUTPUT "</div>\n";
    }
    # reset div level counter
    $div_level=0;

    
    # set newpar to 1 (true)
    $newpar = 1;

    # print footnotes
    if (@footnotes) {
	print OUTPUT "\n<div id=\"footnotes\">\n";
	print OUTPUT "<ol>\n";
	my $fn_counter = 0;
	
	foreach (@footnotes) {
	    $fn_counter++;
	    print OUTPUT "<li id=\"fn$fn_counter\">";
	    print OUTPUT "<a href=\"#fna$fn_counter\">";
	    print OUTPUT $_;
	    print OUTPUT "</a>\n";
	    print OUTPUT "</li>\n";
	}
	
	print OUTPUT "</ol>\n";
	print OUTPUT "</div>\n";
    }
    

}

close (INPUT);


# print rest of template.
while ($template =~ /^(.*?)$/mg) {
    my $line = $1;
    print OUTPUT "$line\n";
}

close (TEMPLATE);
close (OUTPUT);

